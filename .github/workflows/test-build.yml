# scope: Build and Push Docker Image

name: Test

on:
  pull_request:
    paths: '**/Dockerfile**'

defaults:
  run:
    shell: bash

jobs:
  get-builds:
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    outputs:
      build_matrix: ${{ steps.set-build-matrix.outputs.build_matrix }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get Change Files
      id: change-files
      uses: jitterbit/get-changed-files@v1

    - name: Set Build Matrix
      id: set-build-matrix
      run: |      
        change_files=(${{ steps.change-files.outputs.added_modified }})
        build_matrix=()
        image_dependencies=(
            "ubuntu"
            "python"
            "terraform"
            "java"
            "dotnet"
            "terraform-azure"
            "pyspark"
        )
        
        # sorting changes by dependency
        for image in "${image_dependencies[@]}"; do
          for file in "${change_files[@]}"; do
            if [[ "$file" == *$image* ]]; then
              sorted_files+=("$file")
            fi
          done
        done

        # capture dev Dockerfiles
        for file in "${change_files[@]}";
        do
          if [[ "$file" =~ /Dockerfile\.dev$ ]]; 
          then
            image_tag="$(basename "$(dirname "$file")")";          
            image_name="$(basename "$(dirname "$(dirname "$file")")")";  
            build_matrix+=("{\"dockerfile\":\"$file\",\"image_name\":\"$image_name\",\"image_tag\":\"$image_tag\"}");   
          fi
        done

        # join the elements with commas and wrap in square brackets
        build_matrix=$(printf ",%s" "${build_matrix[@]}")
        build_matrix="{\"include\": [${build_matrix:1}]}"

        echo "build_matrix=$(echo "$build_matrix" | jq -c .)" >> "$GITHUB_OUTPUT"

  test-build-container:
    needs: get-builds
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix: ${{ fromJson(needs.get-builds.outputs.build_matrix) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_ID }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ${{ matrix.dockerfile }}
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_HUB_ID }}/${{ matrix.image_name }}:${{ matrix.image_tag }}-dev
